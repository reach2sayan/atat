char *helpstring=""
"-> What does this program do?\n"
"\n"
"It gradually constructs a increasingly more accurate cluster expansion.\n"
"A user-provided script running concurrently is responsible for notifying\n"
"maps when computer time is available. maps creates files describing\n"
"structures whose energy should be calculated. The user-provided script\n"
"sets up the runs needed to calculate the energy of these structures.\n"
"As maps becomes aware of more and more structural energies, it gradually\n"
"improves the precision of the cluster expansion, which is continously\n"
"written to an output file.\n"
"The code terminates when a stop file is created by typing, for instance,\n"
"touch stop\n"
"\n"
"NOTE: Fully functional scripts are included with the package:\n"
"pollmach and runstruct_vasp.\n"
"For for more information type\n"
"  pollmach\n"
"  runstruct_vasp -h\n"
"\n"
"-> Format of the input file defining the lattice (specified by the -l option)\n"
"\n"
"First, the coordinate system a,b,c is specified, either as\n"
"[a] [b] [c] [alpha] [beta] [gamma]\n"
"or as:\n"
"[ax] [ay] [az]\n"
"[bx] [by] [bz]\n"
"[cx] [cy] [cz]\n"
"Then the lattice vectors u,v,w are listed, expressed in the coordinate system just defined:\n"
"[ua] [ub] [uc]\n"
"[va] [vb] [vc]\n"
"[wa] [wb] [wc]\n"
"Finally, atom positions and types are given, expressed in the same coordinate system\n"
"as the lattice vectors:\n"
"[atom1a] [atom1b] [atom1c] [atom1types]\n"
"[atom2a] [atom2b] [atom2c] [atom2types]\n"
"etc.\n"
"\n"
"-The atom type is a comma-separated list of the atomic\n"
" symbols of the atoms that can sit the lattice site.\n"
"-The first symbol listed is assigned a spin of -1 and the second, a spin of 1.\n"
"-When only one symbol is listed, this site is ignored for the purpose\n"
" of calculating correlations, but not for determining symmetry.\n"
"\n"
"Examples:\n"
"\n"
"The fcc lattice of the Cu-Au system:\n"
"3.8 3.8 3.8 90 90 90\n"
"0   0.5 0.5\n"
"0.5 0   0.5\n"
"0.5 0.5 0\n"
"0 0 0 Cu,Au\n"
"\n"
"A lattice for the Li_x Co_y Al_(1-y) O_2 system:\n"
" 0.707 0.707 6.928 90 90 120\n"
" 0.3333  0.6667 0.3333\n"
"-0.6667 -0.3333 0.3333\n"
" 0.3333 -0.3333 0.3333\n"
" 0       0      0       Li,Vac\n"
" 0.3333  0.6667 0.0833  O\n"
" 0.6667  0.3333 0.1667  Co,Al\n"
" 0       0      0.25    O\n"
"Running the above example requires the multicomponent version of maps,\n"
"called mmaps.\n"
"\n"
"Optional input file: ref_energy.in\n"
"\n"
"  Contains the reference energy (per site) to be subtracted to get formation energies.\n"
"  The first line is the c=0 energy, the second line is the c=1 energy.\n"
"  If this file is omitted, the energies of leftmost and rightmost structures\n"
"  (on the concentration axis) are taken.\n"
"\n"
"Optional input file: nbclusters.in\n"
"  Allows the user to manually select which clusters to include in the fit.\n"
"  This file should contains:\n"
"    number of pairs to include\n"
"    number of triplets to include\n"
"    etc.\n"
"  This file can be changed while maps is running. However, you must type\n"
"   touch refresh\n"
"  to tell maps to reread it.\n"
"\n"
"-> Output files\n"
"\n"
"maps.log\n"
"Contains possible warnings:\n"
"  'Not enough known energies to fit CE'\n"
"  'True ground states not = fitted ground states'\n"
"  'New ground states predicted, see predstr.out'\n"
"\n"
"These warning should disappear as more structural energies become available\n"
"and the following messages should be displayed:\n"
"  'Among structures of known energy, true and predicted ground states agree.'\n"
"  'No other ground states of xx atoms/unit cell or less exist.'\n"
"\n"
"This file also gives the crossvalidation score of the current fit\n"
"(before the weighting is turned on in order to get the correct ground states).\n"
"\n"
"fit.out\n"
"Contains the results of the fit, one structure per line and each line\n"
"has the following information:\n"
"  concentration energy fitted_energy (energy-fitted_energy) weight index\n"
"'concentration' lies between 0 and 1.\n"
"'energy' is per site (a site is a place where more than one atom type can lie)\n"
"'weight' is the weight of this structure in the fit.\n"
"'index' is the name of the directory associated with this structure.\n"
"\n"
"predstr.out\n"
"Contains the predicted energy (per site) of all structures maps has in memory but\n"
"whose true energy is unknown or has been flagged with error.\n"
"Format: one structure per line, and each line has the following information:\n"
"  concentration energy predicted_energy index status\n"
"index is the structure number (or -1 if not written to disk yet).\n"
"energy is the calculated energy (or 0 if unknown).\n"
"status is either b for busy (being calculated), e for error or u for unknown\n"
"(not yet calculated). A g is appended to status if that structure is predicted to be\n"
"a ground state. To list all predicted ground states, type\n"
"grep 'g' predstr.out\n"
"\n"
"gs.out\n"
"Lists the ground state energies, one structure per line and each line\n"
"has the following information:\n"
"  concentration energy fitted_energy index\n"
"\n"
"gs_str.out\n"
"Lists the ground state structures, in the same format as the n/str.out files\n"
"(see below). Each structure is terminated by the word 'end' on a line by itself,\n"
"followed by a blank line.\n"
"\n"
"eci.out\n"
"Lists the eci. (They have already been divided by multiplicity.)\n"
"The corresponding clusters are in clusters.out\n"
"\n"
"clusters.out\n"
"For each cluster, the first line is the multiplicity, the second line is the\n"
"cluster diameter, and the third line is the number of points in the cluster.\n"
"The remaining lines are the coordinates of the points in the cluster\n"
"(in the coordinate system specified in the input file defining the lattice).\n"
"A blank line separates each cluster.\n"
"\n"
"n/str.out\n"
"Same format as the lattice file, except that\n"
"-The coordinate system is always written as 3x3 matrix\n"
"-Only one atom is listed for each site.\n"
"\n"
"ref_energy.out\n"
"Reference energies used to calculate formation energies.\n"
"(Usually: energy of the pure end members OR values given in\n"
"ref_energy.in if provided.)\n"
"\n"
"-> Communication protocol between maps and the script driving the\n"
"   energy method code (e.g. ab initio code)\n"
"   (Only those who want to customize the code need to read this section.\n"
"   The scripts described in this section are provided with the atat\n"
"   distribution in the glue/ subdirectory.)\n"
"\n"
"Unless otherwise specified all files mentioned reside in the directory where\n"
"maps was started. All paths are relative to the startup directory.\n"
"\n"
"+The script should first wait for computer time to be available before creating\n"
" a file called 'ready'.\n"
"-Upon detecting that the 'ready' file has been created,\n"
" maps responds by creating a subdirectory 'n' (where 'n' is a number) and a file\n"
" 'n/str.out' containing a description of a structure whose energy needs to be\n"
" calculated.\n"
"-maps creates a file called 'n/wait' to distinguish this directory\n"
" from other ones created earlier.\n"
"-maps deletes the 'ready' file.\n"
"+Upon detecting that the 'ready' file has disappeared,\n"
" the script should now look for the 'n/wait' file, start the calculations\n"
" in the directory 'n' and delete file 'n/wait'.\n"
"+If anything goes wrong in the calculations, the script should create a file\n"
" 'n/error'.\n"
"+When the calculations terminate successfully, the energy per unit cell of the structure\n"
" should be copied to the file 'n/energy'.\n"
" (NOTE: use energy per unit cell of the structure NOT per unit cell of the lattice).\n"
"-maps continuously scans all the subdirectories 'n' for 'n/energy' or 'n/error'\n"
" files and updates the cluster expansion accordingly.\n"
"-maps updates the cluster expansion whenever a file called 'refresh' is created\n"
" (maps then deletes it).\n"
"-maps terminates when a 'stop' file is created.\n"
"\n"
"Note that the script can ask maps to create new structure directories even before\n"
"the energy of the current structure has been found.\n"
"Note that human intervention is allowed: an 'n/error' file can be\n"
"manually created if an error is later found in a run.\n"
"Users can also manually step up all runs if they wish so, as long\n"
"as they follow the protocol.\n"
"\n"
"Example of script\n"
"(portions in /* */ have to be filled in with the appropriate code):\n"
"\n"
"#!/bin/csh\n"
"\n"
"while (! -e stop)\n"
"  /* check machine load here */\n"
"  if ( /* load low enough */ ) then\n"
"    touch ready\n"
"    while (-e ready)\n"
"      sleep 30\n"
"    end\n"
"    cd `ls */wait | sed 's+/.*++g' | head -1`\n"
"    rm -f wait\n"
"    /* convert str.out to the native format of ab initio code */\n"
"    /* in background: run code and create either energy file or error file */\n"
"    cd ..\n"
"  endif\n"
"  sleep 180\n"
"end\n"
"\n"
"-> Using maps with vasp\n"
"\n"
"The script runstruct_vasp, when run from within directory 'n',\n"
"1) converts 'vasp.wrap' and 'n/str.out' into all the necessary files to run vasp,\n"
"2) runs vasp\n"
"3) extract all the information from the output files and writes in a format\n"
"   readable by maps.\n"
"\n"
"An example of vasp.wrap is:\n"
"[INCAR]\n"
"PREC = high\n"
"ISMEAR = -1\n"
"SIGMA = 0.1\n"
"NSW=41\n"
"IBRION = 2\n"
"ISIF = 3\n"
"KPPRA = 1000\n"
"DOSTATIC\n"
"\n"
"See ezvasp documentation for more information.\n"
"\n"
"-> Importing structures into maps\n"
"\n"
"MAPS continuously scans all the first-level subdirectories containing\n"
"a file called str.out and tries to map them onto superstructures of the\n"
"lattice provided. This lets you 'import' structures from another source\n"
"into MAPS. A word of caution: the imported structures must be\n"
"unrelaxed and no effort is made to rotate or scale them in order to\n"
"match the lattice (aside from space group symmetry operations).\n"
;
